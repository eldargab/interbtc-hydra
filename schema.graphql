enum IssueStatus {
    Completed
    Cancelled
    Expired
    PendingWithBtcTxNotFound
    PendingWithBtcTxNotIncluded
    PendingWithTooFewConfirmations
    PendingWithEnoughConfirmations
}

enum RedeemStatus {
    Completed,
    Expired,
    Reimbursed,
    Retried,
    PendingWithBtcTxNotFound,
    PendingWithBtcTxNotIncluded,
    PendingWithTooFewConfirmations,
    PendingWithEnoughConfirmations,
}

type VaultRegistration @entity {
    id: String! @unique
    block: Int!
    timestamp: BigInt!
}

type Height @entity {
    absolute: BigInt! @unique # Apparently Int cannot be unique
    active: Int!
}

type Issue @entity {
    "Issue request"
    id: String! @unique
    request: IssueRequest! @derivedFrom(field: "issue")
    bridgeFee: BigInt!
    griefingCollateral: BigInt!
    userParachainAddress: String!
    vaultWalletPubkey: String!
    vaultBackingAddress: String!
    vaultParachainAddress: String!
    backingPayment: IssuePayment @derivedFrom(field: "issue")
    status: IssueStatus
    execution: IssueExecution @derivedFrom(field: "issue")
    cancellation: IssueCancellation @derivedFrom(field: "issue")
    refund: Refund @derivedFrom(field: "issue")
}

type IssuePayment @entity {
    "Bitcoin payment executing an issue"
    issue: Issue! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
    amount: BigInt!
}

type IssueRequest @entity {
    "Request of an issue"
    issue: Issue! @unique
    requestedAmountWrapped: BigInt!
    height: Height!
    timestamp: BigInt!
}

type IssueExecution @entity {
    "Execution of an issue"
    issue: Issue! @unique
    executedAmountWrapped: BigInt!
    height: Height!
    timestamp: BigInt!
}

type IssueCancellation @entity {
    "Cancellation of an issue request"
    issue: Issue! @unique
    height: Height!
    timestamp: BigInt!
}

type Refund @entity {
    "Refund on issue overpayment"
    issue: Issue! @unique
    refundBtcAddress: String!
    refundAmountBTC: BigInt
}

type Redeem @entity {
    id: String! @unique
    request: RedeemRequest! @derivedFrom(field: "redeem")
    bridgeFee: BigInt!
    collateralPremium: BigInt!
    btcTransferFee: BigInt!
    userParachainAddress: String!
    userBackingAddress: String!
    vaultParachainAddress: String!
    backingPayment: RedeemPayment @derivedFrom(field: "redeem")
    status: RedeemStatus
    execution: RedeemExecution @derivedFrom(field: "redeem")
    cancellation: RedeemCancellation @derivedFrom(field: "redeem")
}

type RedeemPayment @entity {
    "Bitcoin payment executing a redeem"
    redeem: Redeem! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
}

type RedeemRequest @entity {
    "Request for redeeming"
    redeem: Redeem! @unique
    requestedAmountBacking: BigInt!
    height: Height!
    timestamp: BigInt!
}

type RedeemExecution @entity {
    "Execution of a redeem"
    redeem: Redeem! @unique
    height: Height!
    timestamp: BigInt!
}

type RedeemCancellation @entity {
    "Cancellation of a redeem request"
    redeem: Redeem! @unique
    height: Height!
    timestamp: BigInt!
    reimbursed: Boolean!
}
