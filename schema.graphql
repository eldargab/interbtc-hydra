enum IssueStatus {
    Completed
    Cancelled
    RequestedRefund
    Expired
    PendingWithBtcTxNotFound
    PendingWithBtcTxNotIncluded
    PendingWithTooFewConfirmations
    PendingWithEnoughConfirmations
}

enum RedeemStatus {
    Completed,
    Expired,
    Reimbursed,
    Retried,
    PendingWithBtcTxNotFound,
    PendingWithBtcTxNotIncluded,
    PendingWithTooFewConfirmations,
    PendingWithEnoughConfirmations,
}

type VaultRegistration @entity {
    id: ID!
    block: Int!
    timestamp: DateTime!
}

type Height @entity {
    id: ID!
    absolute: BigInt! @unique # Apparently Int cannot be unique
    active: Int!
}

type RelayedBlock @entity {
    id: ID!
    relayedAtHeight: Height!
    timestamp: DateTime!
    blockHash: String!
    backingHeight: Int!
    relayer: String
}

type Issue @entity {
    id: ID!
    request: IssueRequest!
    bridgeFee: BigInt!
    griefingCollateral: BigInt!
    userParachainAddress: String!
    vaultWalletPubkey: String!
    vaultBackingAddress: String!
    vaultParachainAddress: String!
    backingPayment: IssuePayment @derivedFrom(field: "issue")
    status: IssueStatus
    execution: IssueExecution @derivedFrom(field: "issue")
    cancellation: IssueCancellation @derivedFrom(field: "issue")
    refund: Refund @derivedFrom(field: "issue")
}

"Bitcoin payment executing an issue"
type IssuePayment @entity {
    issue: Issue! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
    amount: BigInt!
}

"Request of an issue"
type IssueRequest {
    amountWrapped: BigInt!
    height: Height!
    timestamp: DateTime!
}

"Execution of an issue"
type IssueExecution @entity {
    issue: Issue! @unique
    amountWrapped: BigInt!
    height: Height!
    timestamp: DateTime!
}

"Cancellation of an issue request"
type IssueCancellation @entity {
    issue: Issue! @unique
    height: Height!
    timestamp: DateTime!
}

"Refund on issue overpayment"
type Refund @entity {
    id: ID!
    issue: Issue! @unique
    btcAddress: String!
    amountPaid: BigInt!
    btcFee: BigInt!
    requestHeight: Height!
    requestTimestamp: DateTime!
    executionHeight: Height
    executionTimestamp: DateTime
}

type Redeem @entity {
    id: ID!
    request: RedeemRequest!
    bridgeFee: BigInt!
    collateralPremium: BigInt!
    btcTransferFee: BigInt!
    userParachainAddress: String!
    userBackingAddress: String!
    vaultParachainAddress: String!
    backingPayment: RedeemPayment @derivedFrom(field: "redeem")
    status: RedeemStatus
    execution: RedeemExecution @derivedFrom(field: "redeem")
    cancellation: RedeemCancellation @derivedFrom(field: "redeem")
}

"Request for redeeming"
type RedeemRequest {
    requestedAmountBacking: BigInt!
    height: Height!
    timestamp: DateTime!
}

"Bitcoin payment executing a redeem"
type RedeemPayment @entity {
    redeem: Redeem! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
}

"Execution of a redeem"
type RedeemExecution @entity {
    redeem: Redeem! @unique
    height: Height!
    timestamp: DateTime!
}

"Cancellation of a redeem request"
type RedeemCancellation @entity {
    redeem: Redeem! @unique
    height: Height!
    timestamp: DateTime!
    reimbursed: Boolean!
}
