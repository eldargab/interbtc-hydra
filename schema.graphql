enum IssueStatus {
    Completed
    Cancelled
    RequestedRefund
    Expired
    PendingWithBtcTxNotFound
    PendingWithBtcTxNotIncluded
    PendingWithTooFewConfirmations
    PendingWithEnoughConfirmations
}

type VaultRegistration @entity {
    id: String! @unique
    block: Int!
    timestamp: BigInt!
}

type Issue @entity {
    "Issue request"
    id: String! @unique
    request: IssueRequest! @derivedFrom(field: "issue")
    bridgeFee: BigInt!
    griefingCollateral: BigInt!
    userParachainAddress: String!
    vaultWalletPubkey: String!
    vaultBackingAddress: String!
    vaultParachainAddress: String!
    backingPayment: IssuePayment @derivedFrom(field: "issue")
    status: IssueStatus
    execution: Execution @derivedFrom(field: "issue")
    refund: Refund @derivedFrom(field: "issue")
}

type IssuePayment @entity {
    "Bitcoin payment executing an issue"
    issue: Issue! @unique
    btcTxId: String!
    confirmations: Int!
    blockHeight: Int
    amount: BigInt!
}

type IssueRequest @entity {
    "Request of an issue"
    issue: Issue! @unique
    requestedAmountWrapped: BigInt!
    block: Int!
    timestamp: BigInt!
}

type IssueExecution @entity {
    "Execution of an issue"
    issue: Issue! @unique
    executedAmountWrapped: BigInt!
    block: Int!
    timestamp: BigInt!
}

type Refund @entity {
    issue: Issue! @unique
    refundBtcAddress: String!
    refundAmountBTC: BigInt
}
